!function (d, str) {
    /** @type {Element} */
    var e = d.createElement("style");
    if (d.getElementsByTagName("head")[0].appendChild(e), e.styleSheet) {
        if (!e.styleSheet.disabled) {
            /** @type {string} */
            e.styleSheet.cssText = str;
        }
    } else {
        try {
            /** @type {string} */
            e.innerHTML = str;
        } catch (n) {
            /** @type {string} */
            e.innerText = str;
        }
    }
}(document, "/*\nTo customize the look and feel of Ionic, you can override the variables\nin ionic's _variables.scss file.\nFor example, you might change some of the default colors:\n*/\n.ionic_timepicker_popup .font_28px {\n  font-size: 28px;\n}\n.ionic_timepicker_popup .margin_zero {\n  margin: 0;\n}\n.ionic_timepicker_popup .padding_zero {\n  padding: 0;\n}\n.ionic_timepicker_popup .popup {\n  background-color: #ffffff;\n}\n.ionic_timepicker_popup .popup-head {\n  display: none;\n}\n.ionic_timepicker_popup .popup-body {\n  padding: 0;\n}\n.ionic_timepicker_popup .popup-buttons {\n  padding: 0;\n  min-height: 44px;\n  height: 44px;\n}\n.ionic_timepicker_popup .popup-buttons .button:not(:last-child) {\n  margin-right: 1px;\n}\n.ionic_timepicker_popup .padding_left_15px {\n  padding-left: 15px;\n}\n.ionic_timepicker_popup .heading {\n  height: 44px;\n  background-color: #ffa400;\n  color: #ffffff;\n  text-align: center;\n  line-height: 44px;\n  font-size: 18px;\n  font-weight: bold;\n}\n.ionic_timepicker_popup .time_picker_colon {\n  padding-top: 45px;\n  text-align: center;\n  font-weight: bold;\n}\n.ionic_timepicker_popup .time_picker_arrows {\n  width: 100%;\n}\n.ionic_timepicker_popup .time_picker_box_text {\n  height: 40px;\n  text-align: center;\n  border: 1px solid #dddddd;\n  font-size: 16px;\n  line-height: 38px;\n}\n.ionic_timepicker_popup .overflowShow {\n  white-space: normal !important;\n}\n.ionic_timepicker_popup .button_set, .ionic_timepicker_popup .button_close {\n  background-color: #ffa400;\n  color: #ffffff;\n}"),
    function (currentModule) {
        try {
            currentModule = angular.module("ionic-timepicker.templates");
        } catch (e) {
            currentModule = angular.module("ionic-timepicker.templates", []);
        }
        currentModule.run(["$templateCache", function ($templateCache) {
                $templateCache.put("ionic-timepicker.html", '<div><div class=heading>{{time.hours}} : {{time.minutes}} <span ng-show="time.format == 12">{{time.meridian}}</span></div><div class=row ng-class="{\'padding_left_15px\':time.format == 12}"><div class="col col-25" ng-class="{\'col-offset-20 col-25\':time.format == 24}"><button type=button class="button button-clear button-small button-dark time_picker_arrows" ng-click=increaseHours()><i class="icon ion-chevron-up"></i></button><div ng-bind=time.hours class=time_picker_box_text></div><button type=button class="button button-clear button-small button-dark time_picker_arrows" ng-click=decreaseHours()><i class="icon ion-chevron-down"></i></button></div><label class="col col-10 time_picker_colon">:</label><div class="col col-25" ng-class="{\'col-25\':time.format == 24}"><button type=button class="button button-clear button-small button-dark time_picker_arrows" ng-click=increaseMinutes()><i class="icon ion-chevron-up"></i></button><div ng-bind=time.minutes class=time_picker_box_text></div><button type=button class="button button-clear button-small button-dark time_picker_arrows" ng-click=decreaseMinutes()><i class="icon ion-chevron-down"></i></button></div><label class="col col-10 time_picker_colon" ng-if="time.format == 12">:</label><div class="col col-25" ng-if="time.format == 12"><button type=button class="button button-clear button-small button-dark time_picker_arrows" ng-click=changeMeridian()><i class="icon ion-chevron-up"></i></button><div ng-bind=time.meridian class=time_picker_box_text></div><button type=button class="button button-clear button-small button-dark time_picker_arrows" ng-click=changeMeridian()><i class="icon ion-chevron-down"></i></button></div></div></div>');
            }]);
    }(), angular.module("ionic-timepicker", ["ionic-timepicker.provider", "ionic-timepicker.templates"]), angular.module("ionic-timepicker.provider", []).provider("ionicTimePicker", function () {
    var param = {
        setLabel: "Set",
        closeLabel: "Close",
        inputTime: 60 * (new Date).getHours() * 60 + 60 * (new Date).getMinutes(),
        format: 12,
        step: 15,
        from: 0,
        to: 24
    };
    /**
     * @param {?} triggers
     * @return {undefined}
     */
    this.configTimePicker = function (triggers) {
        angular.extend(param, triggers);
    };
    /** @type {Array} */
    this.$get = ["$rootScope", "$ionicPopup", function ($rootScope, dialog) {
            /**
             * @param {Date} clone
             * @return {?}
             */
            function clearTime(clone) {
                return clone.setHours(0), clone.setMinutes(0), clone.setSeconds(0), clone.setMilliseconds(0), clone;
            }
            /**
             * @param {number} offset
             * @param {number} formatString
             * @return {undefined}
             */
            function format(offset, formatString) {
                /** @type {number} */
                settings.time.hours = offset / 3600;
                /** @type {number} */
                var minutes = offset % 3600;
                if (12 == formatString) {
                    if (settings.time.hours > 12) {
                        settings.time.hours -= 12;
                        /** @type {string} */
                        settings.time.meridian = "PM";
                    } else {
                        /** @type {string} */
                        settings.time.meridian = "AM";
                    }
                }
                /** @type {number} */
                settings.time.minutes = minutes / 60;
                /** @type {string} */
                settings.time.hours = settings.time.hours.toFixed(0);
                /** @type {string} */
                settings.time.minutes = settings.time.minutes.toFixed(0);
                if (1 == settings.time.hours.toString().length) {
                    /** @type {string} */
                    settings.time.hours = "0" + settings.time.hours;
                }
                if (1 == settings.time.minutes.toString().length) {
                    /** @type {string} */
                    settings.time.minutes = "0" + settings.time.minutes;
                }
                settings.time.format = settings.mainObj.format;
            }
            var openTimePicker = {};
            var settings = $rootScope.$new();
            return settings.today = clearTime(new Date).getTime(),
                settings.time = {},
                settings.increaseHours = function () {
                    if (settings.mainObj.constraint) {
                        var compareTo = settings.mainObj.constraint.to;
                        var whatToCompare = ((24 == settings.mainObj.format) ? settings.time.hours : (settings.time.meridian === 'AM' ? (settings.time.hours % 12): (settings.time.hours % 12)+ 12)) * 60 + settings.time.minutes;

                        if (whatToCompare >= compareTo)
                            return false;
                    }

                    /** @type {number} */
                    settings.time.hours = Number(settings.time.hours);
                    if (12 == settings.mainObj.format) {
                        if (12 != settings.time.hours) {
                            settings.time.hours += 1;
                        } else {
                            /** @type {number} */
                            settings.time.hours = 1;
                        }
                    }
                    if (24 == settings.mainObj.format) {
                        /** @type {number} */
                        settings.time.hours = (settings.time.hours + 1) % 24;
                    }
                    /** @type {(number|string)} */
                    settings.time.hours = settings.time.hours < 10 ? "0" + settings.time.hours : settings.time.hours;
                },
                settings.decreaseHours = function () {
                    if (settings.mainObj.constraint) {
                        var compareTo = settings.mainObj.constraint.from;
                        var whatToCompare = ((24 == settings.mainObj.format) ? settings.time.hours : (settings.time.meridian === 'AM' ? (settings.time.hours % 12): (settings.time.hours % 12)+ 12)) * 60 + settings.time.minutes;

                        if (whatToCompare <= compareTo)
                            return false;
                    }

                    /** @type {number} */
                    settings.time.hours = Number(settings.time.hours);
                    if (12 == settings.mainObj.format) {
                        if (settings.time.hours > 1) {
                            settings.time.hours -= 1;
                        } else {
                            /** @type {number} */
                            settings.time.hours = 12;
                        }
                    }
                    if (24 == settings.mainObj.format) {
                        /** @type {number} */
                        settings.time.hours = (settings.time.hours + 23) % 24;
                    }
                    /** @type {(number|string)} */
                    settings.time.hours = settings.time.hours < 10 ? "0" + settings.time.hours : settings.time.hours;
                },
                settings.increaseMinutes = function () {
                    /** @type {number} */
                    settings.time.minutes = Number(settings.time.minutes);
                    /** @type {number} */
                    settings.time.minutes = (settings.time.minutes + settings.mainObj.step) % 60;
                    /** @type {(number|string)} */
                    settings.time.minutes = settings.time.minutes < 10 ? "0" + settings.time.minutes : settings.time.minutes;
                },
                settings.decreaseMinutes = function () {
                    /** @type {number} */
                    settings.time.minutes = Number(settings.time.minutes);
                    /** @type {number} */
                    settings.time.minutes = (settings.time.minutes + (60 - settings.mainObj.step)) % 60;
                    /** @type {(number|string)} */
                    settings.time.minutes = settings.time.minutes < 10 ? "0" + settings.time.minutes : settings.time.minutes;
                },
                settings.changeMeridian = function () {
                    /** @type {string} */
                    if (settings.mainObj.constraint) {
                        var whatToCompare = (settings.time.meridian === 'AM' ? (settings.time.hours % 12): (settings.time.hours % 12)+ 12) * 60 + settings.time.minutes;

                        if (settings.time.meridian === "AM") {
                            if (whatToCompare > settings.mainObj.to)
                                return false;
                        }
                        if (settings.time.meridian === "PM") {
                            if (whatToCompare < settings.mainObj.from)
                                return false;
                        }
                    }
                    settings.time.meridian = "AM" === settings.time.meridian ? "PM" : "AM";
                }, openTimePicker.openTimePicker = function (expression) {
                /** @type {Array} */
                var buttons = [];
                settings.mainObj = angular.extend({}, param, expression);
                format(settings.mainObj.inputTime, settings.mainObj.format);
                buttons.push({
                    text: settings.mainObj.setLabel,
                    type: "button_set",
                    /**
                     * @param {?} t
                     * @return {undefined}
                     */
                    onTap: function (t) {
                        /** @type {number} */
                        var actionFound = 0;
                        if (12 == settings.time.format) {
                            /** @type {number} */
                            settings.time.hours = Number(settings.time.hours);
                            if ("PM" == settings.time.meridian && 12 != settings.time.hours) {
                                settings.time.hours += 12;
                            } else {
                                if ("AM" == settings.time.meridian) {
                                    if (12 == settings.time.hours) {
                                        settings.time.hours -= 12;
                                    }
                                }
                            }
                            /** @type {number} */
                            actionFound = 60 * settings.time.hours * 60 + 60 * settings.time.minutes;
                        } else {
                            /** @type {number} */
                            actionFound = 60 * settings.time.hours * 60 + 60 * settings.time.minutes;
                        }
                        settings.mainObj.callback(actionFound);
                    }
                });
                buttons.push({
                    text: settings.mainObj.closeLabel,
                    type: "button_close"
                });
                settings.popup = dialog.show({
                    templateUrl: "ionic-timepicker.html",
                    scope: settings,
                    cssClass: "ionic_timepicker_popup",
                    buttons: buttons
                });
            }, openTimePicker;
        }];
});
